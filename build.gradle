import java.nio.charset.StandardCharsets

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'org.ajoberstar.reckon' version '0.16.1'
}

def generalCharset = StandardCharsets.UTF_8.name()

group = 'xo.market'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = generalCharset
compileTestJava.options.encoding = generalCharset
javadoc.options.encoding = generalCharset

reckon {
    stages('dev', 'beta', 'rc', 'final')

    scopeCalc = calcScopeFromProp() | calcScopeFromCommitMessages()
    stageCalc = calcStageFromProp()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation group: 'org.jetbrains', name: 'annotations', version: '23.0.0'
    implementation group: 'fr.alexpado', name: 'simple-http-client', version: '1.0.2'
    implementation group: 'org.json', name: 'json', version: '20220320'
    implementation group: 'fr.alexpado', name: 'xodb4j', version: '1.0.0-rc.3'

    implementation group: 'io.sentry', name: 'sentry-spring-boot-starter', version: '6.4.1'
}

task copyConfigurationMetadata(type: Copy) {
    from(compileJava) {
        include 'META-INF/spring-configuration-metadata.json'
    }
    into "out/production/classes"
}

compileJava {
    dependsOn processResources
    finalizedBy copyConfigurationMetadata
}

tasks.named('test') {
    useJUnitPlatform()
}

static def isNonStable(String version) {
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
